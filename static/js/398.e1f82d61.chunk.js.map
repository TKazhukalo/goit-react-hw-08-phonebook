{"version":3,"file":"static/js/398.e1f82d61.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactsList/ContactsList.styled.jsx","redux/filter/selectors.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/Form/Form.styled.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/ContactForm/ContactForm.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n    margin: 0 auto;\n    width: 700px;\n    min-height: 650px;\n    margin-top: 30px;\n    background: #4CA1AF; \n    background: -webkit-linear-gradient(to right, #C4E0E5, #4CA1AF);\n    background: linear-gradient(to right, #C4E0E5, #4CA1AF); \n    font-family:'Fira Sans',sans-serif;\n    box-shadow: 0 0 10px #eee;\n`;","import styled from '@emotion/styled';\n\nexport const ContactItem=styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items:center;\n    width: 500px;\n    margin-bottom: 10px;\n    font-size:16px;\n`\nexport const Button=styled.button`\n    background-image: linear-gradient(to right, #c2e59c 0%, #64b3f4  51%, #c2e59c  100%);\n    margin: 10px;\n    padding: 15px 45px;\n    text-align: center;\n    text-transform: uppercase;\n    transition: 0.5s;\n    background-size: 200% auto;\n    color: #3768e3;            \n    box-shadow: 0 0 20px #eee;\n    border-radius: 10px;\n    display: block;\n    cursor: pointer;\n    border:0;\n        &:hover {\n            background-position: right center; /* change the direction of the change here */\n            color: #fff;\n            text-decoration: none;\n          }\n`\nexport const ListItem = styled.ul`\n    display:flex;\n    flex-direction:column;\n    justify-content:space-between;\n    padding: 0;\n    align-items: center;\n`\nexport const ItemContact=styled.span`\n    color: #3768e3;\n \n`","export const selectFilter = state => state.filter;","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"redux/filter/selectors\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n);","import React from \"react\";\nimport { Button, ContactItem, ItemContact, ListItem } from \"./ContactsList.styled\";\nimport {  useDispatch, useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { deleteContact } from \"redux/contacts/operations\";\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem>\n      {contacts.map(({ name, number, id, phone }) => {\n        const contactNumber = number || phone;\n        return (\n          <ContactItem key={id}>\n            <ItemContact>\n              {name}: {contactNumber}\n            </ItemContact>\n          <Button type=\"button\"\n              name=\"delete\"\n              onClick={() => dispatch(deleteContact(id))}>\n              Delete\n          </Button>\n          </ContactItem>\n        );\n      })}\n    </ListItem>\n  );\n};","import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color:white;\n  \n`\nexport const Input = styled.input`\n  width: 260px;\n  padding: 12px 18px;\n  margin-bottom: 16px;\n  border-radius: 4px;\n\n  border:1px solid rgba(108, 82, 237, 0.3);\n  outline:none;\n  background-color: Field;\n  color: #3768e3;\n    &:hover{\n  box-shadow: 0 0 10px #ebd7d7;\n}\n\n`\nexport const Label = styled.label`\n  margin-bottom: 8px;\n  font-weight: 500;\n`","import React from 'react';\nimport { FormContainer, Input, Label } from \"components/Form/Form.styled\";\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\n\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const Filter = () => {\n\nconst value = useSelector(selectFilter);\nconst dispatch = useDispatch();\n\nconst handleFilterChange = (e) => {\n    const normalizedValue = e.target.value.toLowerCase();\n    dispatch(changeFilter(normalizedValue));\n  };\n\n  return (\n    <FormContainer>\n      <Label>Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={handleFilterChange}\n      />\n    </FormContainer>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nexport default Filter;","import React, { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { FormContainer, Input, Label } from \"./Form.styled\";\nimport { Button } from \"components/ContactsList/ContactsList.styled\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts} from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nexport const Form=()=>{\nconst nameId = nanoid();\nconst numberId = nanoid();\nconst contacts = useSelector(selectContacts);\nconst dispatch = useDispatch();\nconst [name, setName] = useState('');\nconst [number, setNumber] = useState('');\n  \nconst handleChange = evt => {\n   const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\nconst handleSubmit = evt => {\n  evt.preventDefault();\n    const isInContacts = contacts.some(\n      contact => contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n    );\n      if (isInContacts) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n     dispatch(addContact({name,number}));\n    setName('');\n    setNumber('')\n};\n    return (\n       <FormContainer onSubmit={handleSubmit}>\n                <Label htmlFor={nameId}>Name:</Label>\n                <Input\n                    type=\"text\"\n                    name=\"name\"\n                    id={nameId}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                    onChange={handleChange}\n                />\n                <Label htmlFor={numberId}>Number:</Label>\n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    id={numberId}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleChange}\n                />\n                <Button type=\"submit\">Add contact</Button>\n            </FormContainer>\n        );        \n}","import styled from '@emotion/styled';\n\nexport const SectionContainer = styled.section`\n    padding-top: 10px;\n    padding-bottom: 10px;\n    text-align: center;\n    \n`;\nexport const Title = styled.h2`\n    color:white;\n    margin-bottom:20px;\n    font-size:26px;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SectionContainer, Title } from \"./Section.styled\";\n\nexport const Section = ({ title, children }) => {\n     \n        return (\n            <SectionContainer>\n                <Title>{title}</Title>\n                {children}\n            </SectionContainer>\n        );\n    }\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderAnimation = styled.div`\n  display: flex;\n  justify-content: center;\n`;","import React from \"react\";\nimport { InfinitySpin } from  'react-loader-spinner'\nimport {  LoaderAnimation } from \"./Loader.styled\";\n const Loader = () => {\n   return ( \n    <LoaderAnimation>\n      <InfinitySpin \n        width='150'\n         color=\"#ba3b46\"\n      />\n    </LoaderAnimation>  \n    )\n}\n\nexport default Loader;","import { useSelector, useDispatch } from 'react-redux';\nimport { Container } from './ContactForm.styled';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport { Section } from 'components/Section/Section';\nimport { selectContacts, selectError, selectIsLoading} from '../../redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport Loader from '../Loader/Loader';\nimport { selectFilter } from '../../redux/filter/selectors';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts.length > 0 ? (\n          <Filter value={value}/>\n        ) : (\n          <p>Введіть дані</p>\n        )}\n    {isLoading && !error && <Loader />}\n{/*{isLoading && !error && <b>Request in progress...</b>}*/}\n        <ContactsList />\n      </Section>\n    </Container>\n  );\n};\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch])\n    \n    return (\n        <>\n            <Helmet>\n                <title> Your contacts</title>\n            </Helmet>\n                <ContactForm />                   \n        </>\n    )\n}"],"names":["Container","styled","ContactItem","Button","ListItem","ItemContact","selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactsList","useSelector","dispatch","useDispatch","map","number","id","phone","contactNumber","type","onClick","deleteContact","FormContainer","Input","Label","Filter","value","onChange","e","normalizedValue","target","changeFilter","Form","nameId","nanoid","numberId","useState","setName","setNumber","handleChange","evt","onSubmit","preventDefault","some","trim","alert","addContact","htmlFor","pattern","title","required","SectionContainer","Title","Section","children","LoaderAnimation","width","color","ContactForm","useEffect","fetchContacts","length","Contacts","Helmet"],"sourceRoot":""}